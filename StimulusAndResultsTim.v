// Generated by BugHunter Pro Version 20.26 at 8:56:58 on 4/14/2018
// Stimulator for syncad_top

// Generation Settings:
//   Export type: Stimulus only (reactive export not enabled)
//                Delays, Samples, Markers, etc will not generate code.

// Clock Domains:


`define TB_ABORT (3'b000)
`define TB_ONCE (3'b001)
`define TB_DONE (3'b010)
`define TB_LOOPING (3'b011)
`define TB_RESTART (3'b100)
`define TB_END (3'b101)
`timescale  1 ns /  1 ps

module syncad_top;

  // Internal Signal Declarations
  wire SIG0;
  reg SIG0_driver;
  wire SIG1;
  reg SIG1_driver;
  wire CLK0;
  assign SIG0 = SIG0_driver;
  assign SIG1 = SIG1_driver;


  // Control Signal Declarations
  reg [2:0] tb_status;

  // Parm Declarations
  real CLK0_MinHL;
  real CLK0_MaxHL;
  real CLK0_MinLH;
  real CLK0_MaxLH;
  real CLK0_JFall;
  real CLK0_JRise;
  real CLK0_Duty;
  real CLK0_Period;
  real CLK0_Offset;


  // The following initial block will start up the stimulator.
  initial
    begin
    AssignParms;
    tb_status <= `TB_ONCE;
    #10000;
    tb_status <= `TB_DONE;
    $display("Note: At %t: End of stimulus reached.  Use End Diagram Marker to extend or shorten stimulus.", $time);
    end

  // Parm Assignment Task
  task AssignParms;
    begin
    CLK0_MinHL = 0.0;
    CLK0_MaxHL = 0.0;
    CLK0_MinLH = 0.0;
    CLK0_MaxLH = 0.0;
    CLK0_JFall = 0.0;
    CLK0_JRise = 0.0;
    CLK0_Duty = 50.0;
    CLK0_Period = 100.0;
    CLK0_Offset = 0.0;
    end
  endtask

  // Clocks

  // Clock Instantiation
  wire [63:0] CLK0_Offset_bits = $realtobits(CLK0_Offset);
  wire [63:0] CLK0_Period_bits = $realtobits(CLK0_Period);
  wire [63:0] CLK0_Duty_bits = $realtobits(CLK0_Duty);
  wire [63:0] CLK0_JRise_bits = $realtobits(CLK0_JRise);
  wire [63:0] CLK0_JFall_bits = $realtobits(CLK0_JFall);
  wire [63:0] CLK0_MinLH_bits = $realtobits(CLK0_MinLH);
  wire [63:0] CLK0_MaxLH_bits = $realtobits(CLK0_MaxLH);
  wire [63:0] CLK0_MinHL_bits = $realtobits(CLK0_MinHL);
  wire [63:0] CLK0_MaxHL_bits = $realtobits(CLK0_MaxHL);
  tb_clock_minmax #(1)
    tb_CLK0(tb_status[1:0],
            CLK0,
            CLK0_Offset_bits,
            CLK0_Period_bits,
            CLK0_Duty_bits,
            CLK0_MinLH_bits,
            CLK0_MaxLH_bits,
            CLK0_MinHL_bits,
            CLK0_MaxHL_bits,
            CLK0_JRise_bits,
            CLK0_JFall_bits);
endmodule
